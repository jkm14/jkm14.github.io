[
  {
    "objectID": "danl_210_Miller_Jacob_stock_ESG (4).html",
    "href": "danl_210_Miller_Jacob_stock_ESG (4).html",
    "title": "ESG Project",
    "section": "",
    "text": "Background\nIn recent years, the importance of Environmental, Social, and Governance (ESG) performance has grown significantly among investors and regulatory bodies. ESG metrics are now seen as essential indicators of a company’s long-term stability, ethical conduct, and risk exposure. Despite this shift, traditional financial indicators such as revenue growth, profit margins, and stock performance continue to drive investment decisions. Gaining insight into how ESG risk scores change over time and how they correlate with financial outcomes can help companies align sustainable practices with long-term value creation.\n\n\nIntroduction\nThis project explores the relationship between a companys ESG risk score and its financial performance. By integrating ESG data with key financial indicators, the goal is to uncover trends that may support more responsible, sustainability-oriented investment decisions.\n\n\nData Collection\nPython selenium web-scraping of Yahoo Finance data\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n# Load saved CSVs\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\nprint(esg_proj_2024_data)\nprint(stock_history_2023)\n\n# Compute daily returns\nstock_history_2023['Return'] = stock_history_2023['Close'].pct_change()\n\n# Quick peek at data types\nprint(esg_proj_2024_data.dtypes)\nprint(stock_history_2023.dtypes)\n\n# Drop rows missing key ESG values\nesg_proj_2024_data = esg_proj_2024_data.dropna(subset=['Total_ESG'])\n\n# Aggregate\navg_esg    = esg_proj_2024_data.groupby('Symbol')['Total_ESG'].mean().reset_index()\navg_return = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\ncompany_df = pd.merge(avg_esg, avg_return, on='Symbol')\n\n     Year Symbol                                       Name  \\\n0    2024      A     Agilent Technologies Inc. Common Stock   \n1    2024     AA            Alcoa Corporation Common Stock    \n2    2024    AAL  American Airlines Group Inc. Common Stock   \n3    2024    AAP                    Advance Auto Parts Inc.   \n4    2024   AAPL                    Apple Inc. Common Stock   \n..    ...    ...                                        ...   \n620  2024    XYL                Xylem Inc. Common Stock New   \n621  2024    YUM                           Yum! Brands Inc.   \n622  2024      Z    Zillow Group Inc. Class C Capital Stock   \n623  2024    ZBH   Zimmer Biomet Holdings Inc. Common Stock   \n624  2024    ZTS           Zoetis Inc. Class A Common Stock   \n\n                     Sector                                          Industry  \\\n0               Industrials  Biotechnology: Laboratory Analytical Instruments   \n1               Industrials                                          Aluminum   \n2    Consumer Discretionary                     Air Freight/Delivery Services   \n3    Consumer Discretionary                         Auto & Home Supply Stores   \n4                Technology                            Computer Manufacturing   \n..                      ...                                               ...   \n620             Industrials                                    Fluid Controls   \n621  Consumer Discretionary                                       Restaurants   \n622  Consumer Discretionary                                 Business Services   \n623             Health Care                            Industrial Specialties   \n624             Health Care        Biotechnology: Pharmaceutical Preparations   \n\n           Country     Market_Cap  IPO_Year  Total_ESG  Environmental  Social  \\\n0    United States    40365434818    1999.0       13.6            1.1     6.4   \n1    United States     6622135551    2016.0       24.0           13.8     5.9   \n2    United States     9088024606       NaN       26.4            9.9    11.6   \n3    United States     4474665296       NaN       11.5            0.1     8.3   \n4    United States  2614310000000    1980.0       17.2            0.5     7.4   \n..             ...            ...       ...        ...            ...     ...   \n620  United States    32010402681    2011.0       18.1            4.3     8.7   \n621  United States    39885044416       NaN       20.1            4.5    11.4   \n622  United States    10195469129       NaN       22.2            1.2    11.5   \n623  United States    24476778026       NaN       26.0            3.6    14.5   \n624  United States    72535308358    2013.0       18.8            3.2     6.8   \n\n     Governance  Controversy  \n0           6.1          2.0  \n1           4.3          3.0  \n2           4.8          2.0  \n3           3.1          2.0  \n4           9.4          3.0  \n..          ...          ...  \n620         5.2          1.0  \n621         4.1          2.0  \n622         9.5          2.0  \n623         7.9          2.0  \n624         8.7          2.0  \n\n[625 rows x 13 columns]\n              Date  Year Symbol        Open        High         Low  \\\n0       2023-12-29  2023      A  138.587233  139.215036  137.879691   \n1       2023-12-28  2023      A  139.815657  140.084270  138.930245   \n2       2023-12-27  2023      A  139.059578  139.437624  138.363189   \n3       2023-12-26  2023      A  138.591994  139.746018  138.373126   \n4       2023-12-22  2023      A  138.890449  139.636584  138.074668   \n...            ...   ...    ...         ...         ...         ...   \n157745  2023-01-09  2023    ZTS  146.205080  146.715330  144.242596   \n157746  2023-01-06  2023    ZTS  143.840283  145.832203  138.865393   \n157747  2023-01-05  2023    ZTS  144.586064  145.400482  141.563836   \n157748  2023-01-04  2023    ZTS  146.224720  147.981137  145.184606   \n157749  2023-01-03  2023    ZTS  145.871459  145.999010  142.486177   \n\n             Close   Volume  Dividend  Stock_Splits  \n0       138.547363  1014400     0.236           0.0  \n1       139.049637   892600     0.000           0.0  \n2       139.099380  1182300     0.000           0.0  \n3       139.089416   948400     0.000           0.0  \n4       138.850662  1204100     0.000           0.0  \n...            ...      ...       ...           ...  \n157745  144.301468  1700500     0.000           0.0  \n157746  144.870590  1761200     0.000           0.0  \n157747  142.721695  1560900     0.000           0.0  \n157748  146.165848  1796100     0.000           0.0  \n157749  144.095413  1840600     0.000           0.0  \n\n[157750 rows x 10 columns]\nYear               int64\nSymbol            object\nName              object\nSector            object\nIndustry          object\nCountry           object\nMarket_Cap         int64\nIPO_Year         float64\nTotal_ESG        float64\nEnvironmental    float64\nSocial           float64\nGovernance       float64\nControversy      float64\ndtype: object\nDate             object\nYear              int64\nSymbol           object\nOpen            float64\nHigh            float64\nLow             float64\nClose           float64\nVolume            int64\nDividend        float64\nStock_Splits    float64\nReturn          float64\ndtype: object\n\n\n\n\nDescriptive Statistics\n\n# ESG measures\nesg_overall = esg_proj_2024_data[['Total_ESG',\n                      'Environmental',\n                      'Social',\n                      'Governance',\n                      'Controversy']].describe()\n\n# Stock measures\nstock_overall = stock_history_2023[['Close', 'Volume', 'Return']].describe()\n\nprint(\"ESG Overall Summary\")\nprint(esg_overall)\nprint(\"\\n Stock Overall Summary\")\nprint(stock_overall)\n\nESG Overall Summary\n        Total_ESG  Environmental      Social  Governance  Controversy\ncount  625.000000     602.000000  602.000000  602.000000   573.000000\nmean    21.567040       5.747342    9.017774    6.819103     1.942408\nstd      7.041637       5.200518    3.567490    2.371114     0.801113\nmin      6.400000       0.000000    0.800000    2.400000     0.000000\n25%     16.300000       1.800000    6.700000    5.225000     1.000000\n50%     21.100000       3.950000    8.900000    6.300000     2.000000\n75%     26.000000       8.875000   11.175000    7.900000     2.000000\nmax     52.000000      25.300000   22.500000   19.400000     5.000000\n\n Stock Overall Summary\n               Close        Volume         Return\ncount  157750.000000  1.577500e+05  157750.000000\nmean      138.463043  4.831341e+06       0.000434\nstd       303.837231  2.183286e+07       0.016063\nmin         0.980000  0.000000e+00      -0.289855\n25%        39.342437  8.251000e+05      -0.008049\n50%        79.422333  1.694200e+06       0.000510\n75%       146.545551  3.867075e+06       0.008866\nmax      7024.819824  1.543911e+09       0.427788\n\n\n\n\nStatistics Continued\n\n\nesg_quart = (\n    esg_proj_2024_data\n    .groupby('Symbol')['Total_ESG']\n    .mean()\n    .reset_index(name='Avg_ESG_Risk')\n)\nesg_quart['ESG_Quartile'] = pd.qcut(\n    esg_quart['Avg_ESG_Risk'],\n    q=4,\n    labels=['Low','MidLow','MidHigh','High']\n)\n\n# Merge quartiles onto daily returns\nstock_history_2023['Return'] = stock_history_2023.groupby('Symbol')['Close'].pct_change()\nmerged = pd.merge(\n    stock_history_2023[['Symbol','Return']],\n    esg_quart[['Symbol','ESG_Quartile']],\n    on='Symbol',\n    how='inner'\n).dropna(subset=['Return'])\n\n# Group by Quartile and financial metrics\nquartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n    Avg_Return = 'mean',\n    Volatility = 'std',\n    Obs = 'count'\n).reset_index()\n\nprint(quartile_stats)\n\n  ESG_Quartile  Avg_Return  Volatility    Obs\n0          Low   -0.000243    0.020704  39591\n1       MidLow   -0.000585    0.018258  38346\n2      MidHigh   -0.000210    0.019483  39093\n3         High   -0.000169    0.019358  38595\n\n\nFutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  quartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n\n\nThis code is relevant to the analysis because it investigates the relationship between a company’s ESG risk and its financial performance. Specifically, daily stock returns. It begins by calculating the average ESG risk score for each company. These companies are then divided into four quartiles—Low, MidLow, MidHigh, and High—based on their average ESG risk levels. This classification enables a structured comparison of companies with different levels of ESG exposure.\nNext, the code calculates each companys daily return using 2023 stock price data and merges this financial information with the ESG quartile labels. By doing so, it creates a combined dataset that links ESG risk to daily financial performance.\nFinally, it groups the data by ESG quartile and computes summary statistics: the average daily return, return volatility as a measure of financial risk, and the number of observations. This allows for a meaningful comparison of whether companies with higher or lower ESG risk tend to perform differently in the stock market, both in terms of return and volatility.\nUltimately, this analysis supports the broader project goal of identifying patterns between ESG performance and financial health, which can inform sustainability-aware investment strategies.\n\n\nData Visualization\n\n# Average Daily Return Distribution\nplt.figure(figsize=(7,5))\nsns.histplot(stock_history_2023['Return'], kde=True)\nplt.xlim(-0.05, 0.05)\nplt.title('Avg Daily Return Distribution')\nplt.xlabel('Avg Daily Return')\nplt.ylabel('Number of Companies')\nplt.show()\n\n\n\n\n\n\n\n\nThis histogram illustrates the distribution of average daily stock returns for companies in the 2023 dataset. By limiting the x-axis to a range between -5% and +5%, the plot focuses on typical daily return behavior and filters out extreme outliers. The majority of returns cluster around 0%, indicating that most companies experience relatively small price fluctuations on a day-to-day basis. This visualization is important because it establishes a baseline understanding of how stock returns behave across the entire sample.\nBefore analyzing differences in financial performance across ESG risk quartiles, it is useful to observe the overall return patterns and identify the range and shape of typical movements. This context helps interpret whether any specific ESG group behaves differently from the general trend.\n\n# ESG Risk Distribution\nplt.figure()\nsns.histplot(esg_proj_2024_data['Total_ESG'], kde=True)\nplt.title('ESG Risk Distribution')\nplt.xlabel('ESG Risk Score')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n\n\nThis histogram shows the distribution of Total ESG Risk Scores for companies in the 2024 dataset. The ESG score reflects a company’s exposure to environmental, social, and governance-related risks, with lower scores indicating lower risk. The shape of the distribution reveals how these risk scores are spread across companies. Most companies tend to fall within a moderate range of ESG risk, with fewer companies showing very low or very high scores.\nThis visualization is important because it provides an overview of how ESG risks are distributed across the market, which is essential for categorizing companies into meaningful risk groups and for comparing financial performance across varying levels of ESG exposure. It helps set the foundation for examining how ESG risk might relate to stock return behavior.\n\n\nCombining Return and ESG Risk\n\nstock_history_2023['Return'] = (stock_history_2023['Close'] - stock_history_2023['Open']) / stock_history_2023['Open']\navg_returns = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\navg_returns.rename(columns={'Return': 'Avg_Daily_Return'}, inplace=True)\ncompany_df = pd.merge(avg_returns, esg_proj_2024_data[['Symbol', 'Total_ESG', 'Sector']], on='Symbol', how='inner')\n\n\n\n# Avg Return vs Avg Total ESG Risk\nplt.figure(figsize=(6,5))\nsns.scatterplot(x='Total_ESG', y='Avg_Daily_Return', data= company_df, alpha=0.5)\nplt.title('Avg Return vs Avg ESG Risk')\nplt.xlabel('Avg Total ESG Risk')\nplt.ylabel('Avg Daily Return')\nplt.axhline(0, color='black', linestyle='--', linewidth=1)\nplt.show()\n\n\n\n\n\n\n\n\nThis scatterplot illustrates the relationship between a companys average Total ESG Risk score and its average daily stock return. Each point on the graph represents a company, with the x-axis showing its average ESG risk score and the y-axis showing its corresponding average daily return. The dashed horizontal line at y = 0 helps distinguish between companies with positive versus negative average returns. The data points are semi-transparent to reduce overplotting and reveal density.\nOverall, the chart allows for a visual assessment of whether companies with lower ESG risk (to the left) tend to perform better or worse financially than those with higher ESG risk (to the right).\nWhile the plot may not reveal a strong, clear trend at first glance, it is valuable for spotting potential patterns or clusters that suggest a relationship between ESG performance and stock returns, contributing to the broader question of how sustainability metrics align with financial outcomes.\n\n\nCorrelation and Heat Map\n\n\nsub_esg = esg_proj_2024_data.groupby('Symbol')[['Environmental',\n                                    'Social',\n                                    'Governance']].mean().reset_index()\ndf_corr = (\n    pd.merge(company_df[['Symbol','Total_ESG','Avg_Daily_Return']],\n             sub_esg, on='Symbol')\n    .set_index('Symbol')\n    [['Total_ESG','Environmental','Social','Governance','Avg_Daily_Return']]\n)\n\nplt.figure(figsize=(6,5))\nsns.heatmap(df_corr.corr(), annot=True, fmt='.2f', linewidths=0.5, cmap='coolwarm')\nplt.title('Correlation: ESG Score and Avg_Daily_Return')\nplt.show()\n\n\n\n\n\n\n\n\nThis heatmap visualizes the correlation between different components of ESG and each company’s average daily return. The correlation matrix shows how strongly each pair of variables is linearly related, with values ranging from -1 (perfect negative correlation) to +1 (perfect positive correlation).\nThe use of color gradients helps quickly identify the strength and direction of each relationship: warmer tones indicate stronger positive correlations, while cooler tones suggest negative correlations. The diagonal shows perfect correlations of each variable with itself (value = 1).\nThis visualization is particularly useful for examining whether certain ESG components are more strongly linked to financial performance than others. For instance, if the Environmental score is more negatively correlated with returns than the Social or Governance scores, it may suggest that environmental risks have a stronger association with market performance."
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nDANL-210 Project\n\n\n\n\n\n\n\n\nMay 16, 2025\n\n\nJacob Miller\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nChristmas Movie Blog\n\n\n\n\n\n\n\n\nApr 9, 2025\n\n\nJacob Miller\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nSpotify Blog\n\n\n\n\n\n\n\n\nMar 3, 2025\n\n\nJacob Miller\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nBlog\n\n\n\n\n\n\n\n\nMar 3, 2025\n\n\nJacob Miller\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nJacob Miller\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl_proj_nba (1).html#salary-distribution-among-teams",
    "href": "danl_proj_nba (1).html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba (1).html#player-age-distribution",
    "href": "danl_proj_nba (1).html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba (1).html#position-wise-salary-insights",
    "href": "danl_proj_nba (1).html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba (1).html#top-10-highest-paid-players",
    "href": "danl_proj_nba (1).html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/post-with-code/Spotify_Blog/Spotify_Blog (2).html",
    "href": "posts/post-with-code/Spotify_Blog/Spotify_Blog (2).html",
    "title": "Spotify Blog",
    "section": "",
    "text": "Spotify DataFrame, and Creative Analysis\n\nimport pandas as pd\n\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\n# utilize counting, sorting, indexing, and filtering methods.\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\npid: playlist ID; unique ID for playlist\nplaylist_name: a name of playlist\npos: a position of the track within a playlist (starting from 0)\nartist_name: name of the track’s primary artist\ntrack_name: name of the track\nduration_ms: duration of the track in milliseconds\nalbum_name: name of the track’s album\n\n\nUsing Filtering, and Setting a New Index\n\n# Filter data for \"The Weeknd\"\nweeknd_songs = spotify[spotify[\"artist_name\"] == \"The Weeknd\"]\n\n# Set index\nweeknd = weeknd_songs.set_index(\"artist_name\")\n\n# Display tracks by The Weeknd\nweeknd\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\ntrack_name\nduration_ms\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\n\n\n\n\nThe Weeknd\n11\nVIBE\n50\nWicked Games\n323746\nTrilogy\n\n\nThe Weeknd\n18\nSARAH\n39\nEarned It (Fifty Shades Of Grey)\n277706\nBeauty Behind The Madness\n\n\nThe Weeknd\n18\nSARAH\n42\nPrisoner\n274960\nBeauty Behind The Madness\n\n\nThe Weeknd\n28\nYeet\n62\nReminder - Remix\n221968\nReminder\n\n\nThe Weeknd\n40\n2020\n3\nStarboy\n230453\nStarboy\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\nThe Weeknd\n999987\nCalm\n80\nPrisoner\n274960\nBeauty Behind The Madness\n\n\nThe Weeknd\n999987\nCalm\n81\nProfessional\n368720\nKiss Land\n\n\nThe Weeknd\n999994\nSlow Songs\n3\nEarned It (Fifty Shades Of Grey)\n277706\nBeauty Behind The Madness\n\n\nThe Weeknd\n999994\nSlow Songs\n51\nI Feel It Coming\n269186\nStarboy\n\n\nThe Weeknd\n999997\nSex\n5\nEarned It (Fifty Shades Of Grey)\n277706\nBeauty Behind The Madness\n\n\n\n\n913 rows × 6 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\nUsing nunique Function to Count the Number of tracks\n\n# Count the number of tracks by The Weeknd\nnum_weeknd_songs = weeknd_songs[\"track_name\"].nunique()\nprint(f\"The Weeknd has {num_weeknd_songs} unique songs in this playlist.\")\n\nThe Weeknd has 75 unique tracks in this playlist.\n\n\n\n# Count unique albums by The Weeknd\nnum_weeknd_albums = weeknd_songs[\"album_name\"].nunique()\nprint(f\"The Weeknd has songs from {num_weeknd_albums} unique albums.\")\n\nThe Weeknd has songs from 10 unique albums.\n\n\n\n\nSorting Data Frame\n\n# Sort The Weeknd's tracks by duration in descending order\nweeknd_sorted_by_duration = weeknd_songs.sort_values(by=\"duration_ms\", ascending=False)\n\n# Display the longest and shortest songs\nprint(\"Longest song:\", weeknd_sorted_by_duration.iloc[0][\"track_name\"])\nprint(\"Shortest song:\", weeknd_sorted_by_duration.iloc[-1][\"track_name\"])\n\nLongest song: Gone\nShortest song: Stargirl Interlude\n\n\n\n\nLocating a Specific Entry\n\n# Locate a specific song by The Weeknd and display the results\nspotify.query(\"artist_name == 'The Weeknd'\")\\\n           .set_index(\"track_name\")\\\n           .loc[\"Starboy\"]\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\nduration_ms\nalbum_name\n\n\ntrack_name\n\n\n\n\n\n\n\n\n\n\nStarboy\n40\n2020\n3\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n85\nGym\n34\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n93\nCatchy Songs\n81\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n107\nparty people\n45\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n142\nGet It!\n108\nThe Weeknd\n230453\nStarboy\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\nStarboy\n999855\npumped\n7\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n999863\nSummer\n32\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n999864\nPlaylist\n34\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n999898\n🔥🔥🔥\n9\nThe Weeknd\n230453\nStarboy\n\n\nStarboy\n999928\nSummer 2017\n104\nThe Weeknd\n230453\nStarboy\n\n\n\n\n100 rows × 6 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Count the number of unique playlists containing songs from \"Starboy\"\nstarboy_playlists = spotify.query(\"album_name == 'Starboy'\")[\"pid\"].nunique()\n\n# Display the result\nprint(f\"'Starboy' appears in {starboy_playlists} unique playlists.\")\n\n'Starboy' appears in 182 unique playlists."
  },
  {
    "objectID": "posts/post-with-code/Movie_Blog/Movie_Blog (1).html",
    "href": "posts/post-with-code/Movie_Blog/Movie_Blog (1).html",
    "title": "Christmas Movie Blog",
    "section": "",
    "text": "Movie Blog\n\nimport pandas as pd\n\n# Loadholiday movie datasets\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\n# First few rows\nprint(holiday_movies.head())\nprint(holiday_movie_genres.head())\n\n      tconst title_type          primary_title          simple_title  year  \\\n0  tt0020356      movie       Sailor's Holiday       sailors holiday  1929   \n1  tt0020823      movie    The Devil's Holiday    the devils holiday  1930   \n2  tt0020985      movie                Holiday               holiday  1930   \n3  tt0021268      movie  Holiday of St. Jorgen  holiday of st jorgen  1930   \n4  tt0021377      movie    Sin Takes a Holiday   sin takes a holiday  1930   \n\n   runtime_minutes  average_rating  num_votes  \n0             58.0             5.4         55  \n1             80.0             6.0        242  \n2             91.0             6.3        638  \n3             83.0             7.4        256  \n4             81.0             6.1        740  \n      tconst   genres\n0  tt0020356   Comedy\n1  tt0020823    Drama\n2  tt0020823  Romance\n3  tt0020985   Comedy\n4  tt0020985    Drama\n\n\n\n\nJoining the two DataFrames\n\n# Merge the two DataFrames based on the 'tconst' column\nholiday_movies_with_genres = pd.merge(holiday_movies, holiday_movie_genres, on='tconst', how='inner')\n\n# Merged DataFrame\nholiday_movies_with_genres.head()\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\ngenres\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\nComedy\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\nDrama\n\n\n2\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\nRomance\n\n\n3\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\nComedy\n\n\n4\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\nDrama\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\nFilter the DF to find Movies with the Comedy Genre\n\n# Filter movies that are comedy genre\ncomedy_movies = holiday_movies_with_genres[holiday_movies_with_genres['genres'] == 'Comedy']\n\n# Display the first few rows of Christmas movies\ncomedy_movies.head()\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\ngenres\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\nComedy\n\n\n3\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\nComedy\n\n\n5\ntt0021268\nmovie\nHoliday of St. Jorgen\nholiday of st jorgen\n1930\n83.0\n7.4\n256\nComedy\n\n\n6\ntt0021377\nmovie\nSin Takes a Holiday\nsin takes a holiday\n1930\n81.0\n6.1\n740\nComedy\n\n\n19\ntt0027456\nmovie\nCollege Holiday\ncollege holiday\n1936\n86.0\n5.7\n190\nComedy\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\nLongest and Shortest Christmas Movies\n\n# Calculate the average runtime of Christmas movies\naverage_runtime = christmas_movies['runtime_minutes'].mean()\n\n# Filter Christmas movies that are longer or shorter than average\nlong_christmas_movies = christmas_movies[christmas_movies['runtime_minutes'] &gt; average_runtime]\nshort_christmas_movies = christmas_movies[christmas_movies['runtime_minutes'] &lt; average_runtime]\n\n# Display the longest and shortest Christmas movies\nlong_christmas_movies[['primary_title', 'runtime_minutes']].head(5)\nshort_christmas_movies[['primary_title', 'runtime_minutes']].head(5)\n\n\n  \n    \n\n\n\n\n\n\nprimary_title\nruntime_minutes\n\n\n\n\n0\nSailor's Holiday\n58.0\n\n\n6\nSin Takes a Holiday\n81.0\n\n\n22\nMad Holiday\n71.0\n\n\n27\nAngel's Holiday\n76.0\n\n\n31\nEvery Day's a Holiday\n79.0\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\nHighest Rated Christmas Movies\n\n# Sort Christmas movies by average rating and number of votes\ntop_rated_christmas_movies = christmas_movies.sort_values(by=['average_rating', 'num_votes'], ascending=False)\n\n# Top 10 rated Christmas movies\ntop_rated_christmas_movies[['primary_title', 'average_rating', 'num_votes']].head(10)\n\n\n  \n    \n\n\n\n\n\n\nprimary_title\naverage_rating\nnum_votes\n\n\n\n\n3062\nChristmas Bone Us\n9.8\n10\n\n\n3214\nCheap vs. Expensive Xmas Day\n9.5\n14\n\n\n2838\nAunty Donna: Always Room for Christmas Pud\n9.3\n24\n\n\n1089\nSanta Claus Versus the Christmas Vixens\n9.1\n33\n\n\n4483\nHoliday Twist\n9.0\n720\n\n\n2773\nBuck Denver Asks... Why Do We Call It Christmas?\n9.0\n29\n\n\n1000\nEastEnders: Christmas Party\n9.0\n18\n\n\n1005\nMorecambe & Wise Christmas Cracker\n9.0\n10\n\n\n2507\nSave Christmas\n8.9\n260\n\n\n2789\nRyang-kang-do: Merry Christmas, North!\n8.7\n42\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\nFind a Specific Movie\n\nChristmas_Bone_Us    = holiday_movies_with_genres[holiday_movies_with_genres['primary_title'] == 'Christmas Bone Us']\nChristmas_Bone_Us\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\ngenres\n\n\n\n\n3062\ntt2273141\nvideo\nChristmas Bone Us\nchristmas bone us\n2012\n6.0\n9.8\n10\nComedy\n\n\n3063\ntt2273141\nvideo\nChristmas Bone Us\nchristmas bone us\n2012\n6.0\n9.8\n10\nFamily\n\n\n3064\ntt2273141\nvideo\nChristmas Bone Us\nchristmas bone us\n2012\n6.0\n9.8\n10\nMystery"
  },
  {
    "objectID": "posts/post-with-code/DANL_210_Proj/danl_210_Miller_Jacob_stock_ESG.html",
    "href": "posts/post-with-code/DANL_210_Proj/danl_210_Miller_Jacob_stock_ESG.html",
    "title": "DANL-210 Project",
    "section": "",
    "text": "Background\nIn recent years, the importance of Environmental, Social, and Governance (ESG) performance has grown significantly among investors and regulatory bodies. ESG metrics are now seen as essential indicators of a company’s long-term stability, ethical conduct, and risk exposure. Despite this shift, traditional financial indicators such as revenue growth, profit margins, and stock performance continue to drive investment decisions. Gaining insight into how ESG risk scores change over time and how they correlate with financial outcomes can help companies align sustainable practices with long-term value creation.\n\n\nIntroduction\nThis project explores the relationship between a companys ESG risk score and its financial performance. By integrating ESG data with key financial indicators, the goal is to uncover trends that may support more responsible, sustainability-oriented investment decisions.\n\n\nData Collection\nPython selenium web-scraping of Yahoo Finance data\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n# Load saved CSVs\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\nprint(esg_proj_2024_data)\nprint(stock_history_2023)\n\n# Compute daily returns\nstock_history_2023['Return'] = stock_history_2023['Close'].pct_change()\n\n# Quick peek at data types\nprint(esg_proj_2024_data.dtypes)\nprint(stock_history_2023.dtypes)\n\n# Drop rows missing key ESG values\nesg_proj_2024_data = esg_proj_2024_data.dropna(subset=['Total_ESG'])\n\n# Aggregate\navg_esg    = esg_proj_2024_data.groupby('Symbol')['Total_ESG'].mean().reset_index()\navg_return = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\ncompany_df = pd.merge(avg_esg, avg_return, on='Symbol')\n\n     Year Symbol                                       Name  \\\n0    2024      A     Agilent Technologies Inc. Common Stock   \n1    2024     AA            Alcoa Corporation Common Stock    \n2    2024    AAL  American Airlines Group Inc. Common Stock   \n3    2024    AAP                    Advance Auto Parts Inc.   \n4    2024   AAPL                    Apple Inc. Common Stock   \n..    ...    ...                                        ...   \n620  2024    XYL                Xylem Inc. Common Stock New   \n621  2024    YUM                           Yum! Brands Inc.   \n622  2024      Z    Zillow Group Inc. Class C Capital Stock   \n623  2024    ZBH   Zimmer Biomet Holdings Inc. Common Stock   \n624  2024    ZTS           Zoetis Inc. Class A Common Stock   \n\n                     Sector                                          Industry  \\\n0               Industrials  Biotechnology: Laboratory Analytical Instruments   \n1               Industrials                                          Aluminum   \n2    Consumer Discretionary                     Air Freight/Delivery Services   \n3    Consumer Discretionary                         Auto & Home Supply Stores   \n4                Technology                            Computer Manufacturing   \n..                      ...                                               ...   \n620             Industrials                                    Fluid Controls   \n621  Consumer Discretionary                                       Restaurants   \n622  Consumer Discretionary                                 Business Services   \n623             Health Care                            Industrial Specialties   \n624             Health Care        Biotechnology: Pharmaceutical Preparations   \n\n           Country     Market_Cap  IPO_Year  Total_ESG  Environmental  Social  \\\n0    United States    40365434818    1999.0       13.6            1.1     6.4   \n1    United States     6622135551    2016.0       24.0           13.8     5.9   \n2    United States     9088024606       NaN       26.4            9.9    11.6   \n3    United States     4474665296       NaN       11.5            0.1     8.3   \n4    United States  2614310000000    1980.0       17.2            0.5     7.4   \n..             ...            ...       ...        ...            ...     ...   \n620  United States    32010402681    2011.0       18.1            4.3     8.7   \n621  United States    39885044416       NaN       20.1            4.5    11.4   \n622  United States    10195469129       NaN       22.2            1.2    11.5   \n623  United States    24476778026       NaN       26.0            3.6    14.5   \n624  United States    72535308358    2013.0       18.8            3.2     6.8   \n\n     Governance  Controversy  \n0           6.1          2.0  \n1           4.3          3.0  \n2           4.8          2.0  \n3           3.1          2.0  \n4           9.4          3.0  \n..          ...          ...  \n620         5.2          1.0  \n621         4.1          2.0  \n622         9.5          2.0  \n623         7.9          2.0  \n624         8.7          2.0  \n\n[625 rows x 13 columns]\n              Date  Year Symbol        Open        High         Low  \\\n0       2023-12-29  2023      A  138.587233  139.215036  137.879691   \n1       2023-12-28  2023      A  139.815657  140.084270  138.930245   \n2       2023-12-27  2023      A  139.059578  139.437624  138.363189   \n3       2023-12-26  2023      A  138.591994  139.746018  138.373126   \n4       2023-12-22  2023      A  138.890449  139.636584  138.074668   \n...            ...   ...    ...         ...         ...         ...   \n157745  2023-01-09  2023    ZTS  146.205080  146.715330  144.242596   \n157746  2023-01-06  2023    ZTS  143.840283  145.832203  138.865393   \n157747  2023-01-05  2023    ZTS  144.586064  145.400482  141.563836   \n157748  2023-01-04  2023    ZTS  146.224720  147.981137  145.184606   \n157749  2023-01-03  2023    ZTS  145.871459  145.999010  142.486177   \n\n             Close   Volume  Dividend  Stock_Splits  \n0       138.547363  1014400     0.236           0.0  \n1       139.049637   892600     0.000           0.0  \n2       139.099380  1182300     0.000           0.0  \n3       139.089416   948400     0.000           0.0  \n4       138.850662  1204100     0.000           0.0  \n...            ...      ...       ...           ...  \n157745  144.301468  1700500     0.000           0.0  \n157746  144.870590  1761200     0.000           0.0  \n157747  142.721695  1560900     0.000           0.0  \n157748  146.165848  1796100     0.000           0.0  \n157749  144.095413  1840600     0.000           0.0  \n\n[157750 rows x 10 columns]\nYear               int64\nSymbol            object\nName              object\nSector            object\nIndustry          object\nCountry           object\nMarket_Cap         int64\nIPO_Year         float64\nTotal_ESG        float64\nEnvironmental    float64\nSocial           float64\nGovernance       float64\nControversy      float64\ndtype: object\nDate             object\nYear              int64\nSymbol           object\nOpen            float64\nHigh            float64\nLow             float64\nClose           float64\nVolume            int64\nDividend        float64\nStock_Splits    float64\nReturn          float64\ndtype: object\n\n\n\n\nStatistics\n\n# ESG measures\nesg_overall = esg_proj_2024_data[['Total_ESG',\n                      'Environmental',\n                      'Social',\n                      'Governance',\n                      'Controversy']].describe()\n\n# Stock measures\nstock_overall = stock_history_2023[['Close', 'Volume', 'Return']].describe()\n\nprint(\"=== ESG Overall Summary ===\")\nprint(esg_overall)\nprint(\"\\n=== Stock Overall Summary ===\")\nprint(stock_overall)\n\n=== ESG Overall Summary ===\n        Total_ESG  Environmental      Social  Governance  Controversy\ncount  625.000000     602.000000  602.000000  602.000000   573.000000\nmean    21.567040       5.747342    9.017774    6.819103     1.942408\nstd      7.041637       5.200518    3.567490    2.371114     0.801113\nmin      6.400000       0.000000    0.800000    2.400000     0.000000\n25%     16.300000       1.800000    6.700000    5.225000     1.000000\n50%     21.100000       3.950000    8.900000    6.300000     2.000000\n75%     26.000000       8.875000   11.175000    7.900000     2.000000\nmax     52.000000      25.300000   22.500000   19.400000     5.000000\n\n=== Stock Overall Summary ===\n               Close        Volume         Return\ncount  157750.000000  1.577500e+05  157749.000000\nmean      138.463043  4.831341e+06       0.011411\nstd       303.837231  2.183286e+07       1.325663\nmin         0.980000  0.000000e+00      -0.998162\n25%        39.342437  8.251000e+05      -0.009884\n50%        79.422333  1.694200e+06      -0.000667\n75%       146.545551  3.867075e+06       0.008984\nmax      7024.819824  1.543911e+09     488.350985\n\n\n\n\nStatistics Continued\n\n# Compute each company’s mean ESG score and assign quartiles\nesg_quart = (\n    esg_proj_2024_data\n    .groupby('Symbol')['Total_ESG']\n    .mean()\n    .reset_index(name='Avg_ESG_Risk')\n)\nesg_quart['ESG_Quartile'] = pd.qcut(\n    esg_quart['Avg_ESG_Risk'],\n    q=4,\n    labels=['Low','MidLow','MidHigh','High']\n)\n\n# Merge quartiles onto daily returns\nstock_history_2023['Return'] = stock_history_2023.groupby('Symbol')['Close'].pct_change()\nmerged = pd.merge(\n    stock_history_2023[['Symbol','Return']],\n    esg_quart[['Symbol','ESG_Quartile']],\n    on='Symbol',\n    how='inner'\n).dropna(subset=['Return'])\n\n# Group by Quartile and financial metrics\nquartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n    Avg_Return = 'mean',\n    Volatility = 'std',\n    Obs = 'count'\n).reset_index()\n\nquartile_stats\n\nFutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  quartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n\n\n\n  \n    \n\n\n\n\n\n\nESG_Quartile\nAvg_Return\nVolatility\nObs\n\n\n\n\n0\nLow\n-0.000243\n0.020704\n39591\n\n\n1\nMidLow\n-0.000585\n0.018258\n38346\n\n\n2\nMidHigh\n-0.000210\n0.019483\n39093\n\n\n3\nHigh\n-0.000169\n0.019358\n38595\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\nData Visualization\n\n# Average Daily Return Distribution\nplt.figure(figsize=(7,5))\nsns.histplot(stock_history_2023['Return'], kde=True)\nplt.xlim(-0.05, 0.05)\nplt.title('Avg Daily Return Distribution')\nplt.xlabel('Avg Daily Return')\nplt.ylabel('Number of Companies')\nplt.show()\n\n\n\n\n\n\n\n\n\n# ESG Risk Distribution\nplt.figure()\nsns.histplot(esg_proj_2024_data['Total_ESG'], kde=True)\nplt.title('ESG Risk Distribution')\nplt.xlabel('ESG Risk Score')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCombining Return and ESG Risk\n\n# Avg Return vs Avg Total ESG Risk\nplt.figure(figsize=(6,5))\nsns.scatterplot(x='ESG_Risk', y='Return', alpha=0.5)\nplt.title('Avg Return vs Avg ESG Risk')\nplt.xlabel('Avg Total ESG Risk')\nplt.ylabel('Avg Daily Return')\nplt.axhline(0, color='black', linestyle='--', linewidth=1)\nplt.show()\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-30-ab707261a4fd&gt; in &lt;cell line: 0&gt;()\n      1 # Avg Return vs Avg Total ESG Risk\n      2 plt.figure(figsize=(6,5))\n----&gt; 3 sns.scatterplot(x='ESG_Risk', y='Return', alpha=0.5)\n      4 plt.title('Avg Return vs Avg ESG Risk')\n      5 plt.xlabel('Avg Total ESG Risk')\n\n/usr/local/lib/python3.11/dist-packages/seaborn/relational.py in scatterplot(data, x, y, hue, size, style, palette, hue_order, hue_norm, sizes, size_order, size_norm, markers, style_order, legend, ax, **kwargs)\n    613 ):\n    614 \n--&gt; 615     p = _ScatterPlotter(\n    616         data=data,\n    617         variables=dict(x=x, y=y, hue=hue, size=size, style=style),\n\n/usr/local/lib/python3.11/dist-packages/seaborn/relational.py in __init__(self, data, variables, legend)\n    394         )\n    395 \n--&gt; 396         super().__init__(data=data, variables=variables)\n    397 \n    398         self.legend = legend\n\n/usr/local/lib/python3.11/dist-packages/seaborn/_base.py in __init__(self, data, variables)\n    632         # information for numeric axes would be information about log scales.\n    633         self._var_ordered = {\"x\": False, \"y\": False}  # alt., used DefaultDict\n--&gt; 634         self.assign_variables(data, variables)\n    635 \n    636         # TODO Lots of tests assume that these are called to initialize the\n\n/usr/local/lib/python3.11/dist-packages/seaborn/_base.py in assign_variables(self, data, variables)\n    677             # to centralize / standardize data consumption logic.\n    678             self.input_format = \"long\"\n--&gt; 679             plot_data = PlotData(data, variables)\n    680             frame = plot_data.frame\n    681             names = plot_data.names\n\n/usr/local/lib/python3.11/dist-packages/seaborn/_core/data.py in __init__(self, data, variables)\n     56 \n     57         data = handle_data_source(data)\n---&gt; 58         frame, names, ids = self._assign_variables(data, variables)\n     59 \n     60         self.frame = frame\n\n/usr/local/lib/python3.11/dist-packages/seaborn/_core/data.py in _assign_variables(self, data, variables)\n    230                 else:\n    231                     err += \"An entry with this name does not appear in `data`.\"\n--&gt; 232                 raise ValueError(err)\n    233 \n    234             else:\n\nValueError: Could not interpret value `ESG_Risk` for `x`. Value is a string, but `data` was not passed.\n\n\n\n&lt;Figure size 600x500 with 0 Axes&gt;"
  },
  {
    "objectID": "danl_210_Miller_Jacob_stock_ESG (1).html",
    "href": "danl_210_Miller_Jacob_stock_ESG (1).html",
    "title": "DANL-210 Project",
    "section": "",
    "text": "Background\nIn recent years, the importance of Environmental, Social, and Governance (ESG) performance has grown significantly among investors and regulatory bodies. ESG metrics are now seen as essential indicators of a company’s long-term stability, ethical conduct, and risk exposure. Despite this shift, traditional financial indicators such as revenue growth, profit margins, and stock performance continue to drive investment decisions. Gaining insight into how ESG risk scores change over time and how they correlate with financial outcomes can help companies align sustainable practices with long-term value creation.\n\n\nIntroduction\nThis project explores the relationship between a companys ESG risk score and its financial performance. By integrating ESG data with key financial indicators, the goal is to uncover trends that may support more responsible, sustainability-oriented investment decisions.\n\n\nData Collection\nPython selenium web-scraping of Yahoo Finance data\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n# Load saved CSVs\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\nprint(esg_proj_2024_data)\nprint(stock_history_2023)\n\n# Compute daily returns\nstock_history_2023['Return'] = stock_history_2023['Close'].pct_change()\n\n# Quick peek at data types\nprint(esg_proj_2024_data.dtypes)\nprint(stock_history_2023.dtypes)\n\n# Drop rows missing key ESG values\nesg_proj_2024_data = esg_proj_2024_data.dropna(subset=['Total_ESG'])\n\n# Aggregate\navg_esg    = esg_proj_2024_data.groupby('Symbol')['Total_ESG'].mean().reset_index()\navg_return = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\ncompany_df = pd.merge(avg_esg, avg_return, on='Symbol')\n\n     Year Symbol                                       Name  \\\n0    2024      A     Agilent Technologies Inc. Common Stock   \n1    2024     AA            Alcoa Corporation Common Stock    \n2    2024    AAL  American Airlines Group Inc. Common Stock   \n3    2024    AAP                    Advance Auto Parts Inc.   \n4    2024   AAPL                    Apple Inc. Common Stock   \n..    ...    ...                                        ...   \n620  2024    XYL                Xylem Inc. Common Stock New   \n621  2024    YUM                           Yum! Brands Inc.   \n622  2024      Z    Zillow Group Inc. Class C Capital Stock   \n623  2024    ZBH   Zimmer Biomet Holdings Inc. Common Stock   \n624  2024    ZTS           Zoetis Inc. Class A Common Stock   \n\n                     Sector                                          Industry  \\\n0               Industrials  Biotechnology: Laboratory Analytical Instruments   \n1               Industrials                                          Aluminum   \n2    Consumer Discretionary                     Air Freight/Delivery Services   \n3    Consumer Discretionary                         Auto & Home Supply Stores   \n4                Technology                            Computer Manufacturing   \n..                      ...                                               ...   \n620             Industrials                                    Fluid Controls   \n621  Consumer Discretionary                                       Restaurants   \n622  Consumer Discretionary                                 Business Services   \n623             Health Care                            Industrial Specialties   \n624             Health Care        Biotechnology: Pharmaceutical Preparations   \n\n           Country     Market_Cap  IPO_Year  Total_ESG  Environmental  Social  \\\n0    United States    40365434818    1999.0       13.6            1.1     6.4   \n1    United States     6622135551    2016.0       24.0           13.8     5.9   \n2    United States     9088024606       NaN       26.4            9.9    11.6   \n3    United States     4474665296       NaN       11.5            0.1     8.3   \n4    United States  2614310000000    1980.0       17.2            0.5     7.4   \n..             ...            ...       ...        ...            ...     ...   \n620  United States    32010402681    2011.0       18.1            4.3     8.7   \n621  United States    39885044416       NaN       20.1            4.5    11.4   \n622  United States    10195469129       NaN       22.2            1.2    11.5   \n623  United States    24476778026       NaN       26.0            3.6    14.5   \n624  United States    72535308358    2013.0       18.8            3.2     6.8   \n\n     Governance  Controversy  \n0           6.1          2.0  \n1           4.3          3.0  \n2           4.8          2.0  \n3           3.1          2.0  \n4           9.4          3.0  \n..          ...          ...  \n620         5.2          1.0  \n621         4.1          2.0  \n622         9.5          2.0  \n623         7.9          2.0  \n624         8.7          2.0  \n\n[625 rows x 13 columns]\n              Date  Year Symbol        Open        High         Low  \\\n0       2023-12-29  2023      A  138.587233  139.215036  137.879691   \n1       2023-12-28  2023      A  139.815657  140.084270  138.930245   \n2       2023-12-27  2023      A  139.059578  139.437624  138.363189   \n3       2023-12-26  2023      A  138.591994  139.746018  138.373126   \n4       2023-12-22  2023      A  138.890449  139.636584  138.074668   \n...            ...   ...    ...         ...         ...         ...   \n157745  2023-01-09  2023    ZTS  146.205080  146.715330  144.242596   \n157746  2023-01-06  2023    ZTS  143.840283  145.832203  138.865393   \n157747  2023-01-05  2023    ZTS  144.586064  145.400482  141.563836   \n157748  2023-01-04  2023    ZTS  146.224720  147.981137  145.184606   \n157749  2023-01-03  2023    ZTS  145.871459  145.999010  142.486177   \n\n             Close   Volume  Dividend  Stock_Splits  \n0       138.547363  1014400     0.236           0.0  \n1       139.049637   892600     0.000           0.0  \n2       139.099380  1182300     0.000           0.0  \n3       139.089416   948400     0.000           0.0  \n4       138.850662  1204100     0.000           0.0  \n...            ...      ...       ...           ...  \n157745  144.301468  1700500     0.000           0.0  \n157746  144.870590  1761200     0.000           0.0  \n157747  142.721695  1560900     0.000           0.0  \n157748  146.165848  1796100     0.000           0.0  \n157749  144.095413  1840600     0.000           0.0  \n\n[157750 rows x 10 columns]\nYear               int64\nSymbol            object\nName              object\nSector            object\nIndustry          object\nCountry           object\nMarket_Cap         int64\nIPO_Year         float64\nTotal_ESG        float64\nEnvironmental    float64\nSocial           float64\nGovernance       float64\nControversy      float64\ndtype: object\nDate             object\nYear              int64\nSymbol           object\nOpen            float64\nHigh            float64\nLow             float64\nClose           float64\nVolume            int64\nDividend        float64\nStock_Splits    float64\nReturn          float64\ndtype: object\n\n\n\n\nStatistics\n\n# ESG measures\nesg_overall = esg_proj_2024_data[['Total_ESG',\n                      'Environmental',\n                      'Social',\n                      'Governance',\n                      'Controversy']].describe()\n\n# Stock measures\nstock_overall = stock_history_2023[['Close', 'Volume', 'Return']].describe()\n\nprint(\"=== ESG Overall Summary ===\")\nprint(esg_overall)\nprint(\"\\n=== Stock Overall Summary ===\")\nprint(stock_overall)\n\n=== ESG Overall Summary ===\n        Total_ESG  Environmental      Social  Governance  Controversy\ncount  625.000000     602.000000  602.000000  602.000000   573.000000\nmean    21.567040       5.747342    9.017774    6.819103     1.942408\nstd      7.041637       5.200518    3.567490    2.371114     0.801113\nmin      6.400000       0.000000    0.800000    2.400000     0.000000\n25%     16.300000       1.800000    6.700000    5.225000     1.000000\n50%     21.100000       3.950000    8.900000    6.300000     2.000000\n75%     26.000000       8.875000   11.175000    7.900000     2.000000\nmax     52.000000      25.300000   22.500000   19.400000     5.000000\n\n=== Stock Overall Summary ===\n               Close        Volume         Return\ncount  157750.000000  1.577500e+05  157749.000000\nmean      138.463043  4.831341e+06       0.011411\nstd       303.837231  2.183286e+07       1.325663\nmin         0.980000  0.000000e+00      -0.998162\n25%        39.342437  8.251000e+05      -0.009884\n50%        79.422333  1.694200e+06      -0.000667\n75%       146.545551  3.867075e+06       0.008984\nmax      7024.819824  1.543911e+09     488.350985\n\n\n\n\nStatistics Continued\n\n\nesg_quart = (\n    esg_proj_2024_data\n    .groupby('Symbol')['Total_ESG']\n    .mean()\n    .reset_index(name='Avg_ESG_Risk')\n)\nesg_quart['ESG_Quartile'] = pd.qcut(\n    esg_quart['Avg_ESG_Risk'],\n    q=4,\n    labels=['Low','MidLow','MidHigh','High']\n)\n\n# Merge quartiles onto daily returns\nstock_history_2023['Return'] = stock_history_2023.groupby('Symbol')['Close'].pct_change()\nmerged = pd.merge(\n    stock_history_2023[['Symbol','Return']],\n    esg_quart[['Symbol','ESG_Quartile']],\n    on='Symbol',\n    how='inner'\n).dropna(subset=['Return'])\n\n# Group by Quartile and financial metrics\nquartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n    Avg_Return = 'mean',\n    Volatility = 'std',\n    Obs = 'count'\n).reset_index()\n\nquartile_stats\n\nFutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  quartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n\n\n\n  \n    \n\n\n\n\n\n\nESG_Quartile\nAvg_Return\nVolatility\nObs\n\n\n\n\n0\nLow\n-0.000243\n0.020704\n39591\n\n\n1\nMidLow\n-0.000585\n0.018258\n38346\n\n\n2\nMidHigh\n-0.000210\n0.019483\n39093\n\n\n3\nHigh\n-0.000169\n0.019358\n38595\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\nData Visualization\n\n# Average Daily Return Distribution\nplt.figure(figsize=(7,5))\nsns.histplot(stock_history_2023['Return'], kde=True)\nplt.xlim(-0.05, 0.05)\nplt.title('Avg Daily Return Distribution')\nplt.xlabel('Avg Daily Return')\nplt.ylabel('Number of Companies')\nplt.show()\n\n\n\n\n\n\n\n\n\n# ESG Risk Distribution\nplt.figure()\nsns.histplot(esg_proj_2024_data['Total_ESG'], kde=True)\nplt.title('ESG Risk Distribution')\nplt.xlabel('ESG Risk Score')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCombining Return and ESG Risk\n\nstock_history_2023['Return'] = (stock_history_2023['Close'] - stock_history_2023['Open']) / stock_history_2023['Open']\navg_returns = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\navg_returns.rename(columns={'Return': 'Avg_Daily_Return'}, inplace=True)\ncompany_df = pd.merge(avg_returns, esg_proj_2024_data[['Symbol', 'Total_ESG', 'Sector']], on='Symbol', how='inner')\n\n\n\n# Avg Return vs Avg Total ESG Risk\nplt.figure(figsize=(6,5))\nsns.scatterplot(x='Total_ESG', y='Avg_Daily_Return', data= company_df, alpha=0.5)\nplt.title('Avg Return vs Avg ESG Risk')\nplt.xlabel('Avg Total ESG Risk')\nplt.ylabel('Avg Daily Return')\nplt.axhline(0, color='black', linestyle='--', linewidth=1)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCorrelation and Heat Map\n\n\nsub_esg = esg_proj_2024_data.groupby('Symbol')[['Environmental',\n                                    'Social',\n                                    'Governance']].mean().reset_index()\ndf_corr = (\n    pd.merge(company_df[['Symbol','Total_ESG','Avg_Daily_Return']],\n             sub_esg, on='Symbol')\n    .set_index('Symbol')\n    [['Total_ESG','Environmental','Social','Governance','Avg_Daily_Return']]\n)\n\nplt.figure(figsize=(6,5))\nsns.heatmap(df_corr.corr(), annot=True, fmt='.2f', linewidths=0.5, cmap='coolwarm')\nplt.title('Correlation: ESG Score and Avg_Daily_Return')\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/py-basics/python_basics (2).html",
    "href": "posts/post-with-code/py-basics/python_basics (2).html",
    "title": "Python Basics",
    "section": "",
    "text": "# Here we assign the integer value 132 to the variable x.\nx = 132\n\n# Now we can use the variable x in the next line.\ny = x + 93\n\n# This can be useful for simple equations"
  },
  {
    "objectID": "posts/post-with-code/py-basics/python_basics (2).html#assignment",
    "href": "posts/post-with-code/py-basics/python_basics (2).html#assignment",
    "title": "Python Basics",
    "section": "",
    "text": "# Here we assign the integer value 132 to the variable x.\nx = 132\n\n# Now we can use the variable x in the next line.\ny = x + 93\n\n# This can be useful for simple equations"
  },
  {
    "objectID": "posts/post-with-code/py-basics/python_basics (2).html#indicates-that-the-rest-of-the-line-is-to-be-ignored.",
    "href": "posts/post-with-code/py-basics/python_basics (2).html#indicates-that-the-rest-of-the-line-is-to-be-ignored.",
    "title": "Python Basics",
    "section": "indicates that the rest of the line is to be ignored.",
    "text": "indicates that the rest of the line is to be ignored.\n\nIt is good practice to write comments before the line that you want the comment to apply to\n\n\n# Like this\n\n# You can describe your code in the next lines...\n\n# This should be used often to help keep code organized and understandable to you"
  },
  {
    "objectID": "posts/post-with-code/py-basics/python_basics (2).html#strings",
    "href": "posts/post-with-code/py-basics/python_basics (2).html#strings",
    "title": "Python Basics",
    "section": "Strings",
    "text": "Strings\n\nstring = \"sprinter\"\nprint( string[-3:] )\n\nstring = \"train\"\nprint(\"String has length of:\")\nprint( len(string) )\n\nter\nString has length of:\n5"
  },
  {
    "objectID": "posts/post-with-code/py-basics/python_basics (2).html#int-float-string-are-functions",
    "href": "posts/post-with-code/py-basics/python_basics (2).html#int-float-string-are-functions",
    "title": "Python Basics",
    "section": "Int, float, string are functions",
    "text": "Int, float, string are functions\n\nprint(\"apple\", \"grape\", \"lime\")\nprint(\"apple\", \"grape\", \"lime\", sep = \"!\")\nprint(\"apple\", \"grape\", \"lime\", sep=\" \")\n\napple grape lime\napple!grape!lime\napple grape lime"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "pandas_basics (1).html#creating-a-series",
    "href": "pandas_basics (1).html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics (1).html#creating-a-dataframe",
    "href": "pandas_basics (1).html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics (1).html#exploring-data",
    "href": "pandas_basics (1).html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics (1).html#selecting-data",
    "href": "pandas_basics (1).html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics (1).html#filtering-data",
    "href": "pandas_basics (1).html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics (1).html#adding-a-new-column",
    "href": "pandas_basics (1).html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jacob Miller",
    "section": "",
    "text": "I am currently pursuing a bachelors degree in finance with a minor in data analytics. I’m developing my technical skills in Excel, SAS, R, and Python to enhance my analytic skillet. Pursuing a deep understanding of financial markets, financial analysis, investment strategies, and data-driven decision-making. I am passionate about leveraging financial insights to drive strategic business growth and adept at problem-solving in dynamic environments.\nAs a member of the track and field team, and 2023 NCAA National Champion, I value discipline, teamwork, and the pursuit of continuous improvement which I bring to both my athletic and academic endeavors. I eagerly anticipate the opportunity to contribute my skills and insights to a dynamic and ambitious company."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jacob Miller",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Finance | Aug 2022 - May 2026  Minor in Data Analytics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jacob Miller",
    "section": "Experience",
    "text": "Experience\nRestaurant Employee, and Golf Course Attendant"
  },
  {
    "objectID": "danl_210_Miller_Jacob_stock_ESG (2).html",
    "href": "danl_210_Miller_Jacob_stock_ESG (2).html",
    "title": "ESG Project",
    "section": "",
    "text": "Background\nIn recent years, the importance of Environmental, Social, and Governance (ESG) performance has grown significantly among investors and regulatory bodies. ESG metrics are now seen as essential indicators of a company’s long-term stability, ethical conduct, and risk exposure. Despite this shift, traditional financial indicators such as revenue growth, profit margins, and stock performance continue to drive investment decisions. Gaining insight into how ESG risk scores change over time and how they correlate with financial outcomes can help companies align sustainable practices with long-term value creation.\n\n\nIntroduction\nThis project explores the relationship between a companys ESG risk score and its financial performance. By integrating ESG data with key financial indicators, the goal is to uncover trends that may support more responsible, sustainability-oriented investment decisions.\n\n\nData Collection\nPython selenium web-scraping of Yahoo Finance data\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n# Load saved CSVs\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\nprint(esg_proj_2024_data)\nprint(stock_history_2023)\n\n# Compute daily returns\nstock_history_2023['Return'] = stock_history_2023['Close'].pct_change()\n\n# Quick peek at data types\nprint(esg_proj_2024_data.dtypes)\nprint(stock_history_2023.dtypes)\n\n# Drop rows missing key ESG values\nesg_proj_2024_data = esg_proj_2024_data.dropna(subset=['Total_ESG'])\n\n# Aggregate\navg_esg    = esg_proj_2024_data.groupby('Symbol')['Total_ESG'].mean().reset_index()\navg_return = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\ncompany_df = pd.merge(avg_esg, avg_return, on='Symbol')\n\n     Year Symbol                                       Name  \\\n0    2024      A     Agilent Technologies Inc. Common Stock   \n1    2024     AA            Alcoa Corporation Common Stock    \n2    2024    AAL  American Airlines Group Inc. Common Stock   \n3    2024    AAP                    Advance Auto Parts Inc.   \n4    2024   AAPL                    Apple Inc. Common Stock   \n..    ...    ...                                        ...   \n620  2024    XYL                Xylem Inc. Common Stock New   \n621  2024    YUM                           Yum! Brands Inc.   \n622  2024      Z    Zillow Group Inc. Class C Capital Stock   \n623  2024    ZBH   Zimmer Biomet Holdings Inc. Common Stock   \n624  2024    ZTS           Zoetis Inc. Class A Common Stock   \n\n                     Sector                                          Industry  \\\n0               Industrials  Biotechnology: Laboratory Analytical Instruments   \n1               Industrials                                          Aluminum   \n2    Consumer Discretionary                     Air Freight/Delivery Services   \n3    Consumer Discretionary                         Auto & Home Supply Stores   \n4                Technology                            Computer Manufacturing   \n..                      ...                                               ...   \n620             Industrials                                    Fluid Controls   \n621  Consumer Discretionary                                       Restaurants   \n622  Consumer Discretionary                                 Business Services   \n623             Health Care                            Industrial Specialties   \n624             Health Care        Biotechnology: Pharmaceutical Preparations   \n\n           Country     Market_Cap  IPO_Year  Total_ESG  Environmental  Social  \\\n0    United States    40365434818    1999.0       13.6            1.1     6.4   \n1    United States     6622135551    2016.0       24.0           13.8     5.9   \n2    United States     9088024606       NaN       26.4            9.9    11.6   \n3    United States     4474665296       NaN       11.5            0.1     8.3   \n4    United States  2614310000000    1980.0       17.2            0.5     7.4   \n..             ...            ...       ...        ...            ...     ...   \n620  United States    32010402681    2011.0       18.1            4.3     8.7   \n621  United States    39885044416       NaN       20.1            4.5    11.4   \n622  United States    10195469129       NaN       22.2            1.2    11.5   \n623  United States    24476778026       NaN       26.0            3.6    14.5   \n624  United States    72535308358    2013.0       18.8            3.2     6.8   \n\n     Governance  Controversy  \n0           6.1          2.0  \n1           4.3          3.0  \n2           4.8          2.0  \n3           3.1          2.0  \n4           9.4          3.0  \n..          ...          ...  \n620         5.2          1.0  \n621         4.1          2.0  \n622         9.5          2.0  \n623         7.9          2.0  \n624         8.7          2.0  \n\n[625 rows x 13 columns]\n              Date  Year Symbol        Open        High         Low  \\\n0       2023-12-29  2023      A  138.587233  139.215036  137.879691   \n1       2023-12-28  2023      A  139.815657  140.084270  138.930245   \n2       2023-12-27  2023      A  139.059578  139.437624  138.363189   \n3       2023-12-26  2023      A  138.591994  139.746018  138.373126   \n4       2023-12-22  2023      A  138.890449  139.636584  138.074668   \n...            ...   ...    ...         ...         ...         ...   \n157745  2023-01-09  2023    ZTS  146.205080  146.715330  144.242596   \n157746  2023-01-06  2023    ZTS  143.840283  145.832203  138.865393   \n157747  2023-01-05  2023    ZTS  144.586064  145.400482  141.563836   \n157748  2023-01-04  2023    ZTS  146.224720  147.981137  145.184606   \n157749  2023-01-03  2023    ZTS  145.871459  145.999010  142.486177   \n\n             Close   Volume  Dividend  Stock_Splits  \n0       138.547363  1014400     0.236           0.0  \n1       139.049637   892600     0.000           0.0  \n2       139.099380  1182300     0.000           0.0  \n3       139.089416   948400     0.000           0.0  \n4       138.850662  1204100     0.000           0.0  \n...            ...      ...       ...           ...  \n157745  144.301468  1700500     0.000           0.0  \n157746  144.870590  1761200     0.000           0.0  \n157747  142.721695  1560900     0.000           0.0  \n157748  146.165848  1796100     0.000           0.0  \n157749  144.095413  1840600     0.000           0.0  \n\n[157750 rows x 10 columns]\nYear               int64\nSymbol            object\nName              object\nSector            object\nIndustry          object\nCountry           object\nMarket_Cap         int64\nIPO_Year         float64\nTotal_ESG        float64\nEnvironmental    float64\nSocial           float64\nGovernance       float64\nControversy      float64\ndtype: object\nDate             object\nYear              int64\nSymbol           object\nOpen            float64\nHigh            float64\nLow             float64\nClose           float64\nVolume            int64\nDividend        float64\nStock_Splits    float64\nReturn          float64\ndtype: object\n\n\n\n\nDescriptive Statistics\n\n# ESG measures\nesg_overall = esg_proj_2024_data[['Total_ESG',\n                      'Environmental',\n                      'Social',\n                      'Governance',\n                      'Controversy']].describe()\n\n# Stock measures\nstock_overall = stock_history_2023[['Close', 'Volume', 'Return']].describe()\n\nprint(\"ESG Overall Summary\")\nprint(esg_overall)\nprint(\"\\n Stock Overall Summary\")\nprint(stock_overall)\n\nESG Overall Summary\n        Total_ESG  Environmental      Social  Governance  Controversy\ncount  625.000000     602.000000  602.000000  602.000000   573.000000\nmean    21.567040       5.747342    9.017774    6.819103     1.942408\nstd      7.041637       5.200518    3.567490    2.371114     0.801113\nmin      6.400000       0.000000    0.800000    2.400000     0.000000\n25%     16.300000       1.800000    6.700000    5.225000     1.000000\n50%     21.100000       3.950000    8.900000    6.300000     2.000000\n75%     26.000000       8.875000   11.175000    7.900000     2.000000\nmax     52.000000      25.300000   22.500000   19.400000     5.000000\n\n Stock Overall Summary\n               Close        Volume         Return\ncount  157750.000000  1.577500e+05  157750.000000\nmean      138.463043  4.831341e+06       0.000434\nstd       303.837231  2.183286e+07       0.016063\nmin         0.980000  0.000000e+00      -0.289855\n25%        39.342437  8.251000e+05      -0.008049\n50%        79.422333  1.694200e+06       0.000510\n75%       146.545551  3.867075e+06       0.008866\nmax      7024.819824  1.543911e+09       0.427788\n\n\n\n\nStatistics Continued\n\n\nesg_quart = (\n    esg_proj_2024_data\n    .groupby('Symbol')['Total_ESG']\n    .mean()\n    .reset_index(name='Avg_ESG_Risk')\n)\nesg_quart['ESG_Quartile'] = pd.qcut(\n    esg_quart['Avg_ESG_Risk'],\n    q=4,\n    labels=['Low','MidLow','MidHigh','High']\n)\n\n# Merge quartiles onto daily returns\nstock_history_2023['Return'] = stock_history_2023.groupby('Symbol')['Close'].pct_change()\nmerged = pd.merge(\n    stock_history_2023[['Symbol','Return']],\n    esg_quart[['Symbol','ESG_Quartile']],\n    on='Symbol',\n    how='inner'\n).dropna(subset=['Return'])\n\n# Group by Quartile and financial metrics\nquartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n    Avg_Return = 'mean',\n    Volatility = 'std',\n    Obs = 'count'\n).reset_index()\n\nprint(quartile_stats)\n\n  ESG_Quartile  Avg_Return  Volatility    Obs\n0          Low   -0.000243    0.020704  39591\n1       MidLow   -0.000585    0.018258  38346\n2      MidHigh   -0.000210    0.019483  39093\n3         High   -0.000169    0.019358  38595\n\n\nFutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  quartile_stats = merged.groupby('ESG_Quartile')['Return'].agg(\n\n\nThis code is relevant to the analysis because it investigates the relationship between a company’s ESG risk and its financial performance. Specifically, daily stock returns. It begins by calculating the average ESG risk score for each company. These companies are then divided into four quartiles—Low, MidLow, MidHigh, and High—based on their average ESG risk levels. This classification enables a structured comparison of companies with different levels of ESG exposure.\nNext, the code calculates each companys daily return using 2023 stock price data and merges this financial information with the ESG quartile labels. By doing so, it creates a combined dataset that links ESG risk to daily financial performance.\nFinally, it groups the data by ESG quartile and computes summary statistics: the average daily return, return volatility as a measure of financial risk, and the number of observations. This allows for a meaningful comparison of whether companies with higher or lower ESG risk tend to perform differently in the stock market, both in terms of return and volatility.\nUltimately, this analysis supports the broader project goal of identifying patterns between ESG performance and financial health, which can inform sustainability-aware investment strategies.\n\n\nData Visualization\n\n# Average Daily Return Distribution\nplt.figure(figsize=(7,5))\nsns.histplot(stock_history_2023['Return'], kde=True)\nplt.xlim(-0.05, 0.05)\nplt.title('Avg Daily Return Distribution')\nplt.xlabel('Avg Daily Return')\nplt.ylabel('Number of Companies')\nplt.show()\n\n\n\n\n\n\n\n\nThis histogram illustrates the distribution of average daily stock returns for companies in the 2023 dataset. By limiting the x-axis to a range between -5% and +5%, the plot focuses on typical daily return behavior and filters out extreme outliers. The majority of returns cluster around 0%, indicating that most companies experience relatively small price fluctuations on a day-to-day basis. This visualization is important because it establishes a baseline understanding of how stock returns behave across the entire sample.\nBefore analyzing differences in financial performance across ESG risk quartiles, it is useful to observe the overall return patterns and identify the range and shape of typical movements. This context helps interpret whether any specific ESG group behaves differently from the general trend.\n\n# ESG Risk Distribution\nplt.figure()\nsns.histplot(esg_proj_2024_data['Total_ESG'], kde=True)\nplt.title('ESG Risk Distribution')\nplt.xlabel('ESG Risk Score')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n\n\nThis histogram shows the distribution of Total ESG Risk Scores for companies in the 2024 dataset. The ESG score reflects a company’s exposure to environmental, social, and governance-related risks, with lower scores indicating lower risk. The shape of the distribution reveals how these risk scores are spread across companies. Most companies tend to fall within a moderate range of ESG risk, with fewer companies showing very low or very high scores.\nThis visualization is important because it provides an overview of how ESG risks are distributed across the market, which is essential for categorizing companies into meaningful risk groups and for comparing financial performance across varying levels of ESG exposure. It helps set the foundation for examining how ESG risk might relate to stock return behavior.\n\n\nCombining Return and ESG Risk\n\nstock_history_2023['Return'] = (stock_history_2023['Close'] - stock_history_2023['Open']) / stock_history_2023['Open']\navg_returns = stock_history_2023.groupby('Symbol')['Return'].mean().reset_index()\navg_returns.rename(columns={'Return': 'Avg_Daily_Return'}, inplace=True)\ncompany_df = pd.merge(avg_returns, esg_proj_2024_data[['Symbol', 'Total_ESG', 'Sector']], on='Symbol', how='inner')\n\n\n\n# Avg Return vs Avg Total ESG Risk\nplt.figure(figsize=(6,5))\nsns.scatterplot(x='Total_ESG', y='Avg_Daily_Return', data= company_df, alpha=0.5)\nplt.title('Avg Return vs Avg ESG Risk')\nplt.xlabel('Avg Total ESG Risk')\nplt.ylabel('Avg Daily Return')\nplt.axhline(0, color='black', linestyle='--', linewidth=1)\nplt.show()\n\n\n\n\n\n\n\n\nThis scatterplot illustrates the relationship between a companys average Total ESG Risk score and its average daily stock return. Each point on the graph represents a company, with the x-axis showing its average ESG risk score and the y-axis showing its corresponding average daily return. The dashed horizontal line at y = 0 helps distinguish between companies with positive versus negative average returns. The data points are semi-transparent to reduce overplotting and reveal density.\nOverall, the chart allows for a visual assessment of whether companies with lower ESG risk (to the left) tend to perform better or worse financially than those with higher ESG risk (to the right).\nWhile the plot may not reveal a strong, clear trend at first glance, it is valuable for spotting potential patterns or clusters that suggest a relationship between ESG performance and stock returns, contributing to the broader question of how sustainability metrics align with financial outcomes.\n\n\nCorrelation and Heat Map\n\n\nsub_esg = esg_proj_2024_data.groupby('Symbol')[['Environmental',\n                                    'Social',\n                                    'Governance']].mean().reset_index()\ndf_corr = (\n    pd.merge(company_df[['Symbol','Total_ESG','Avg_Daily_Return']],\n             sub_esg, on='Symbol')\n    .set_index('Symbol')\n    [['Total_ESG','Environmental','Social','Governance','Avg_Daily_Return']]\n)\n\nplt.figure(figsize=(6,5))\nsns.heatmap(df_corr.corr(), annot=True, fmt='.2f', linewidths=0.5, cmap='coolwarm')\nplt.title('Correlation: ESG Score and Avg_Daily_Return')\nplt.show()"
  }
]